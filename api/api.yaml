openapi: "3.0.0"
info:
  title: Yet Another Web Store
  version: 1.0.5
servers:
  - url: "http://localhost:8080"
    description: "Development server"
paths:
  /api/v1/customers:
    get:
      summary: "Customers"
      description: "Get list of customers"
      operationId: "getCustomers"
      parameters:
        - in: query
          name: limit
          description: maximum number of customers to return
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: offset
          description: number of customers to skip
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerList"
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Customers"
      description: "Add a new customer(s) to the store"
      operationId: "addCustomers"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerList"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerList"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/customers/{id}:
    get:
      summary: "Get single customer"
      description: "Get customer by ID"
      operationId: "getCustomerById"
      parameters:
        - in: path
          name: id
          description: unique identifier for the customer
          required: true
          schema:
            type: integer
            format: int32

      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: "Update single customer"
      description: "Update customer by ID"
      operationId: "updateCustomerById"
      parameters:
        - in: path
          name: id
          description: unique identifier for the customer
          required: true
          schema:
            type: integer
            format: int32

      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: "Delete single customer"
      description: "Delete customer by ID"
      operationId: "deleteCustomerById"
      parameters:
        - in: path
          name: id
          description: unique identifier for the customer
          required: true
          schema:
            type: integer
            format: int32

      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    
  /api/v1/products:
    get:
      summary: "Products"
      description: "Get list of products that can be sold"
      operationId: "getProducts"
      parameters:
        - in: query
          name: limit
          description: maximum number of products to return
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: offset
          description: number of products to skip
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: min_quantity
          description: filter products by minimum quantity
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductList"
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: "Products"
      description: "Add a new product(s) to the store"
      operationId: "addProducts"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductList"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductList"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/products/{id}:
    get:
      summary: "Get single product"
      description: "Get product by ID"
      operationId: "getProductById"
      parameters:
        - in: path
          name: id
          description: unique identifier for the product
          required: true
          schema:
            type: string
            format: uuid

      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: "Update single product"
      description: "Update product by ID"
      operationId: "updateProductById"
      parameters:
        - in: path
          name: id
          description: unique identifier for the product
          required: true
          schema:
            type: string
            format: uuid

      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: "Delete single product"
      description: "Delete product by ID"
      operationId: "deleteProductById"
      parameters:
        - in: path
          name: id
          description: unique identifier for the product
          required: true
          schema:
            type: string
            format: uuid

      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


  /api/v1/orders:
    get:
      summary: "Get list of orders"
      description: "Get list of orders made"
      operationId: "getOrders"
      parameters:
        - in: query
          name: limit
          description: maximum number of orders to return
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: offset
          description: number of orders to skip
          required: false
          schema:
            type: integer
            format: int32
        - in: query
          name: status
          description: filter orders by status
          required: false
          schema:
            type: string
        - in: query
          name: payment_status
          description: filter orders by payment status
          required: false
          schema:
            type: string
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderList"
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    post:
      summary: "Order management"
      description: "Add a new sale to the store"
      operationId: "createOrder"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"

      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/orders/{id}:
    get:
      summary: "Get single order"
      description: "Get order by ID"
      operationId: "getOrderById"
      parameters:
        - in: path
          name: id
          description: unique identifier for the order
          required: true
          schema:
            type: string
            format: uuid

      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '404':
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/orders/{id}/status:
    post:
      summary: "Order management"
      description: "Update single order"
      operationId: "updateOrderStatus"

      parameters:
        - in: path
          name: id
          description: unique identifier for the order
          required: true
          schema:
            type: string
            format: uuid

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"

      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/v1/payment-webhook:
    post:
      summary: "Payment"
      description: "Payment webhook"
      operationId: "paymentWebhook"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Webhook"

      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookResponse"
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"


components:
  schemas:
    CustomerList:
      type: array
      items:
        $ref: "#/components/schemas/Customer"
    Customer:
        type: object
        properties:
          id:
            type: integer
            format: int32
          name:
            type: string
          email:
            type: string
            format: email
          phone:
            type: string
            format: phone
          address:
            type: string
        required:
            - id
            - name
            - email
            - phone
            - address
    ProductList:
      type: array
      items:
        $ref: "#/components/schemas/Product"
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        price:
          type: string
        quantity:
          type: integer
          format: int32
      required:
        - id
        - name
        - price
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        customer_id:
          type: integer
          format: int32
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"
        total_price:
          type: string
        status:
          enum:
            - "pending"
            - "completed"
            - "canceled"
        payment_status:
          enum:
            - "unpaid"
            - "paid"
            - "failed"
      required:
        - id
        - customer_id
        - products
        - total_price
        - status
        - payment_status
    OrderList:
      type: object
      properties:
        discount:
          type: string
        Order:
          type: array
          items:
            $ref: "#/components/schemas/Order"
        total:
          type: string
      required:
        - discount
        - Order
    Webhook:
      type: object
      properties:
        order_id:
          type: string
          format: uuid
        payment_status:
          type: string
      required:
        - order_id
        - payment_status
    WebhookResponse:
      type: object
      properties:
        error:
          type: string
    Error:
      type: object
      properties:
        error:
          type: string
