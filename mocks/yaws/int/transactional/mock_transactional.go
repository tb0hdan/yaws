// Code generated by mockery v2.46.3. DO NOT EDIT.

package transactional

import (
	mock "github.com/stretchr/testify/mock"

	types "yaws/pkg/types"
)

// MockTransactional is an autogenerated mock type for the Transactional type
type MockTransactional struct {
	mock.Mock
}

type MockTransactional_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTransactional) EXPECT() *MockTransactional_Expecter {
	return &MockTransactional_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: from, to, subject, message
func (_m *MockTransactional) Send(from types.Contact, to types.Contact, subject string, message interface{}) error {
	ret := _m.Called(from, to, subject, message)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Contact, types.Contact, string, interface{}) error); ok {
		r0 = rf(from, to, subject, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTransactional_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockTransactional_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - from types.Contact
//   - to types.Contact
//   - subject string
//   - message interface{}
func (_e *MockTransactional_Expecter) Send(from interface{}, to interface{}, subject interface{}, message interface{}) *MockTransactional_Send_Call {
	return &MockTransactional_Send_Call{Call: _e.mock.On("Send", from, to, subject, message)}
}

func (_c *MockTransactional_Send_Call) Run(run func(from types.Contact, to types.Contact, subject string, message interface{})) *MockTransactional_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Contact), args[1].(types.Contact), args[2].(string), args[3].(interface{}))
	})
	return _c
}

func (_c *MockTransactional_Send_Call) Return(_a0 error) *MockTransactional_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTransactional_Send_Call) RunAndReturn(run func(types.Contact, types.Contact, string, interface{}) error) *MockTransactional_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTransactional creates a new instance of MockTransactional. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTransactional(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTransactional {
	mock := &MockTransactional{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
